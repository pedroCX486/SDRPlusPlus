name: Build Binaries

on:
    push:
        branches-ignore:
        - nightly
    pull_request:
        branches-ignore:
        - nightly

env:
    BUILD_TYPE: Release
    GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
    build_macos_x86:
        runs-on: macos-11

        steps:
        - uses: actions/checkout@v3
        
        - name: Prepare build environment
          run: cmake -E make_directory ${{runner.workspace}}/build
          
        - name: Remove superfluous packages and update brew repositories
          run: brew uninstall selenium-server sbt php composer kotlin openjdk ant gradle maven && brew autoremove && brew update

        - name: Install managed dependencies
          run: brew install gcc pkg-config libusb fftw glfw airspy airspyhf portaudio hackrf libbladerf codec2 zstd autoconf automake libtool && pip3 install mako

        - name: Install volk
          run: git clone --recursive https://github.com/gnuradio/volk && cd volk && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Install librtlsdr
          run: git clone https://github.com/rtlsdrblog/rtl-sdr-blog.git && cd rtl-sdr-blog/ && mkdir build && cd build/ && cmake -DCMAKE_C_COMPILER=gcc-13 -DCMAKE_BUILD_TYPE=Release ../ && make -j3 LIBRARY_PATH=$(pkg-config --libs-only-L libusb-1.0 | sed 's/\-L//') && sudo make install && cd ../../

        - name: Install SDRplay API
          run: wget https://www.sdrplay.com/software/SDRplay_RSP_API-MacOSX-3.07.3.pkg && sudo installer -pkg SDRplay_RSP_API-MacOSX-3.07.3.pkg -target /

        - name: Install libiio
          run: wget https://github.com/analogdevicesinc/libiio/archive/refs/tags/v0.25.zip && 7z x v0.25.zip && cd libiio-0.25 && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Install libad9361
          run: git clone https://github.com/analogdevicesinc/libad9361-iio && cd libad9361-iio && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Install LimeSuite
          run: git clone https://github.com/myriadrf/LimeSuite && cd LimeSuite && mkdir builddir && cd builddir && cmake -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Install libperseus
          run: git clone https://github.com/Microtelecom/libperseus-sdr && cd libperseus-sdr && autoreconf -i && ./configure --prefix=/usr/local && make -j3 && make install && cd ..

        - name: Prepare CMake
          working-directory: ${{runner.workspace}}/build
          run: cmake $GITHUB_WORKSPACE -DOPT_BUILD_PLUTOSDR_SOURCE=ON -DOPT_BUILD_SOAPY_SOURCE=OFF -DOPT_BUILD_BLADERF_SOURCE=ON -DOPT_BUILD_SDRPLAY_SOURCE=ON -DOPT_BUILD_LIMESDR_SOURCE=ON -DOPT_BUILD_AUDIO_SINK=OFF -DOPT_BUILD_PORTAUDIO_SINK=ON -DOPT_BUILD_NEW_PORTAUDIO_SINK=ON -DOPT_BUILD_M17_DECODER=ON -DOPT_BUILD_PERSEUS_SOURCE=ON -DOPT_BUILD_AUDIO_SOURCE=OFF -DUSE_BUNDLE_DEFAULTS=ON -DCMAKE_BUILD_TYPE=Release

        - name: Build
          working-directory: ${{runner.workspace}}/build
          run: make VERBOSE=1 -j3

        - name: Create Artifact
          working-directory: ${{runner.workspace}}
          run: cd $GITHUB_WORKSPACE && sh make_macos_bundle.sh ${{runner.workspace}}/build ./SDR++.app && zip -r ${{runner.workspace}}/sdrpp_macos_intel.zip SDR++.app

        - name: Upload Artifact
          uses: actions/upload-artifact@v3
          with:
              name: sdrpp_macos_intel
              path: ${{runner.workspace}}/sdrpp_macos_intel.zip

    build_macos_arm:
        runs-on: macos-latest-xlarge

        steps:
        - uses: actions/checkout@v3
        
        - name: Create Build Environment
          run: cmake -E make_directory ${{runner.workspace}}/build
          
        - name: Update brew repositories
          run: brew update

        - name: Install dependencies
          run: brew install pkg-config libusb fftw glfw airspy airspyhf portaudio hackrf libbladerf codec2 zstd autoconf automake libtool && pip3 install mako

        - name: Install volk
          run: git clone --recursive https://github.com/gnuradio/volk && cd volk && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release .. && make -j6 && sudo make install && cd ../../

        - name: Install SDRplay API
          run: wget https://www.sdrplay.com/software/SDRplayAPI-macos-installer-universal-3.12.0.pkg && sudo installer -pkg SDRplayAPI-macos-installer-universal-3.12.0.pkg -target /

        - name: Install libiio
          run: wget https://github.com/analogdevicesinc/libiio/archive/refs/tags/v0.25.zip && 7z x v0.25.zip && cd libiio-0.25 && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release .. && make -j6 && sudo make install && cd ../../

        - name: Install libad9361
          run: git clone https://github.com/analogdevicesinc/libad9361-iio && cd libad9361-iio && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release .. && make -j6 && sudo make install && cd ../../

        - name: Install LimeSuite
          run: git clone https://github.com/myriadrf/LimeSuite && cd LimeSuite && mkdir builddir && cd builddir && cmake -DCMAKE_BUILD_TYPE=Release .. && make -j6 && sudo make install && cd ../../

        - name: Install libperseus
          run: git clone https://github.com/pedroCX486/libperseus-sdr && cd libperseus-sdr && autoreconf -i && ./configure --prefix=/usr/local LIBRARY_PATH=$(pkg-config --libs-only-L libusb-1.0 | sed 's/\-L//') && make -j3 LIBRARY_PATH=$(pkg-config --libs-only-L libusb-1.0 | sed 's/\-L//') && sudo make install && cd ..

        - name: Install librtlsdr
          run: git clone https://github.com/rtlsdrblog/rtl-sdr-blog.git && cd rtl-sdr-blog/ && mkdir build && cd build/ && cmake -DCMAKE_C_COMPILER=gcc-13 -DCMAKE_BUILD_TYPE=Release ../ && make -j3 LIBRARY_PATH=$(pkg-config --libs-only-L libusb-1.0 | sed 's/\-L//') && sudo make install && cd ../../

        - name: Prepare CMake
          working-directory: ${{runner.workspace}}/build
          run: cmake $GITHUB_WORKSPACE -DOPT_BUILD_PLUTOSDR_SOURCE=ON -DOPT_BUILD_SOAPY_SOURCE=OFF -DOPT_BUILD_BLADERF_SOURCE=ON -DOPT_BUILD_SDRPLAY_SOURCE=OFF -DOPT_BUILD_LIMESDR_SOURCE=ON -DOPT_BUILD_AUDIO_SINK=OFF -DOPT_BUILD_PORTAUDIO_SINK=ON -DOPT_BUILD_NEW_PORTAUDIO_SINK=ON -DOPT_BUILD_M17_DECODER=ON -DOPT_BUILD_PERSEUS_SOURCE=ON -DOPT_BUILD_AUDIO_SOURCE=OFF -DUSE_BUNDLE_DEFAULTS=ON -DCMAKE_BUILD_TYPE=Release

        - name: Build
          working-directory: ${{runner.workspace}}/build
          run: make VERBOSE=1 -j6

        - name: Create Artifact
          working-directory: ${{runner.workspace}}
          run: cd $GITHUB_WORKSPACE && sh make_macos_bundle.sh ${{runner.workspace}}/build ./SDR++.app && zip -r ${{runner.workspace}}/sdrpp_macos_arm.zip SDR++.app

        - name: Upload Artifact
          uses: actions/upload-artifact@v3
          with:
              name: sdrpp_macos_arm
              path: ${{runner.workspace}}/sdrpp_macos_arm.zip
  
    create_artifact_archive:
        needs: ['build_macos_x86', 'build_macos_arm']
        runs-on: ubuntu-latest

        steps:
        - name: Download Build Artifacts
          uses: actions/download-artifact@v3

        - name: Create Artifact Archive
          run: >
            mkdir sdrpp_all && 
            mv sdrpp_macos_intel/sdrpp_macos_intel.zip sdrpp_all/ &&
            mv sdrpp_macos_intel/sdrpp_macos_arm.zip sdrpp_all/

        - uses: actions/upload-artifact@v3
          with:
            name: sdrpp_all
            path: sdrpp_all/

    update_nightly_release:
        needs: [create_artifact_archive]
        runs-on: ubuntu-latest
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

        steps:
        - name: Download Build Artifacts
          uses: actions/download-artifact@v3

        - name: Update Nightly
          run: gh release upload nightly sdrpp_all/* -R ${{github.repository}} --clobber

    check_spelling:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v3

        - name: Install codespell
          run: sudo apt update -y && sudo apt install -y codespell
        
        - name: Running codespell
          run: cd $GITHUB_WORKSPACE && codespell -q 2 || true

    check_formatting:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v3
        
        - name: Run check_clang_format
          run: cd $GITHUB_WORKSPACE && chmod +x ./check_clang_format.sh && ./check_clang_format.sh || true
